"Polymorphosm is the ability to write code that can take on different behaviour through the implementation of types.
Once a type implements an interface, an entire world of functionality can be opened up to values of that type.

"Interfaces are types that just declare behaviour. 
This behaviour is never implemented by the interface directly,
but instead by user-defined types via methods. 
When a user-defined type implements the set of methods declared by an interface type. 
values of the user-defined type can be assigned to values of the interface type. 
This assignment stores the value of the user-defined type into the interface value.

If a method call is made against an interface value, the equivalnet methods for the stored user-defined value is executed.
Since any user-defined type can implement any inteface, method calls against an interface value are polymorphoc in nature.
The user-defined type in this relationship is often called a concrete type, 
since the interface values have no concrete behavior without the implementation of the stored user-defined value." (Bill Kennedy)


Values          Methods Receivers
----------------------------------------
T               (t T)
*T              (t T) and (t *T)

Methods         Receivers Values
----------------------------------------
(t T)           T and *T
(t *T)          *T

